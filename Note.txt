https://www.youtube.com/watch?v=MpGLUVbqoYQ
https://github.com/Colt/webpack-demo-app
https://github.com/Annie-Huang/webpack-demo-app

https://webpack.js.org/
https://github.com/webpack/webpack

https://webpack.js.org/loaders/
https://github.com/webpack-contrib/awesome-webpack#loaders      << Very good list
https://webpack.js.org/loaders/css-loader/
https://webpack.js.org/loaders/style-loader/
https://webpack.js.org/loaders/sass-loader/

https://webpack.js.org/configuration/plugins/
https://webpack.js.org/plugins/
https://github.com/webpack-contrib/awesome-webpack#webpack-plugins
https://webpack.js.org/plugins/html-webpack-plugin/                   << React also use this plugin...
https://github.com/jantimon/html-webpack-plugin#options

https://webpack.js.org/guides/production/#setup
https://webpack.js.org/guides/development/#using-webpack-dev-server

https://webpack.js.org/loaders/html-loader/
https://webpack.js.org/loaders/file-loader/
https://stackoverflow.com/questions/59070216/webpack-file-loader-outputs-object-module
https://stackoverflow.com/questions/59062150/html-loader-file-loader-not-bundling-the-correct-image-source

https://webpack.js.org/guides/output-management/#cleaning-up-the-dist-folder
https://getbootstrap.com/docs/4.4/components/navbar/
https://getbootstrap.com/docs/4.4/getting-started/introduction/     << Show components requiring JavaScript
https://webpack.js.org/plugins/mini-css-extract-plugin/
https://github.com/NMFR/optimize-css-assets-webpack-plugin

prod: main.e1ccc58bae260e3b3d62.js
dev: main.js
dev with webpack-dev-server: not js file is generated. All in memory.


#############################################################################################

A bundler for javascript and friends. Packs many modules into a few bundled assets.
Code Splitting allows for loading parts of the application on demand.
Through "loaders", modules can be CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ... and your custom stuff.

The 2 Main things Webpack does:
- It bundles our code/assets together
- It manages dependencies

-----------------------------------

test: /\.css$/,
$ means it ends
\ is for escape, it needs the escape character before .

-------------------------------------

css-loader: convert css into js code.
            Loads CSS file with resolved imports and returns CSS code
e.g. body {
         background: purple;
     }
     to
     exports.push([module.i, "body {\r\n    background: purple;\r\n}\r\n", ""]);


style-load: take a js script (contains the css) and inject into the DOM.
            Add exports of a module as style to DOM
            Automatically injects styles into the DOM using multiple <style></style>. It is default behaviour.

use: ['style-loader', 'css-loader'],
            The loading is actually in reverse order. The above means css-loader will be used first and it will out put the js.
            And then the js will be injected as a input of the style-loader.
            We now should be able to see the background is purple.
            And if you go to chrome developer tool -> Element -> <head>, you will see
            <style>body {
                background: purple;
            }
            </style>

-----------------------------------------

filename: "main.[contentHash].js",
    Add [contentHash] is to prevent cashing (Cache Busting and Plugins).
    The [contentHash] is calculated against the content of the files bundled as part of webpack. JS, SCSS files. etc
    Any of these files changes will cause a new hash key generated.

HtmlWebpackPlugin - Easily create HTML files to serve your bundles
    This is for generate the main.xxx.js file and inject it as a script tab in index.html

#############################################################################################

C:\react\webpack-demo-app>npm init -y
C:\react\webpack-demo-app>npm install --save-dev webpack webpack-cli
C:\react\webpack-demo-app>npm run start

Error of:
ERROR in Entry module not found: Error: Can't resolve './src' in 'C:\react\webpack-demo-app'
>> This is be default in node application, they expect you to have a ./src/index.js as a default entry file.

Added ./src/index.js and run "npm run start", and we get:
Entrypoint main = main.js
>> .dist/main.js is created


C:\react\webpack-demo-app>npm install --save-dev style-loader css-loader
C:\react\webpack-demo-app>npm install --save-dev bootstrap
C:\react\webpack-demo-app>npm install sass-loader node-sass --save-dev
C:\react\webpack-demo-app>npm install --save-dev html-webpack-plugin
C:\react\webpack-demo-app>npm install --save-dev webpack-merge
C:\react\webpack-demo-app>npm install --save-dev webpack-dev-server
C:\react\webpack-demo-app>npm i -D html-loader
C:\react\webpack-demo-app>npm install file-loader --save-dev

According to
 https://stackoverflow.com/questions/59070216/webpack-file-loader-outputs-object-module
 https://stackoverflow.com/questions/59062150/html-loader-file-loader-not-bundling-the-correct-image-source
You will need to add as options in the file-loader:
esModule: false
Otherwise,
the generated index.html will have <img src="[object Module]"/>, not <img src="imgs/webpack.5a2bd87008f02c88ba55c698d5b412b2.svg"/>


C:\react\webpack-demo-app>npm install --save-dev clean-webpack-plugin
        << Clean the /dist folder before each build, so that only used files will be generated.
           Only need to do it in webpack.prod.js

C:\react\webpack-demo-app>npm install --save-dev jquery popper.js
C:\react\webpack-demo-app>npm install --save-dev mini-css-extract-plugin
C:\react\webpack-demo-app>npm install --save-dev optimize-css-assets-webpack-plugin

